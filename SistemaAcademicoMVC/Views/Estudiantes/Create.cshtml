@model SistemaAcademicoMVC.Models.Estudiante

@{
    ViewBag.Title = "Registrar Nuevo Estudiante";
}

<h2>Registrar Nuevo Estudiante</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Estudiante</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <!-- Datos básicos del estudiante -->
        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", id = "nombreEstudiante" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Apellidos, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Apellidos, new { htmlAttributes = new { @class = "form-control", id = "apellidosEstudiante" } })
                @Html.ValidationMessageFor(model => model.Apellidos, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Identificacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Identificacion, new { htmlAttributes = new { @class = "form-control", id = "identificacionEstudiante" } })
                @Html.ValidationMessageFor(model => model.Identificacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control", type = "date", id = "fechaNacimientoEstudiante" } })
                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Provincia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Provincia, new { htmlAttributes = new { @class = "form-control", id = "provinciaEstudiante" } })
                @Html.ValidationMessageFor(model => model.Provincia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Canton, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Canton, new { htmlAttributes = new { @class = "form-control", id = "cantonEstudiante" } })
                @Html.ValidationMessageFor(model => model.Canton, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Distrito, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Distrito, new { htmlAttributes = new { @class = "form-control", id = "distritoEstudiante" } })
                @Html.ValidationMessageFor(model => model.Distrito, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Correo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Correo, new { htmlAttributes = new { @class = "form-control", id = "correoEstudiante" } })
                @Html.ValidationMessageFor(model => model.Correo, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Selector de cuatrimestre -->
        <div class="form-group">
            @Html.Label("Cuatrimestre", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CuatrimestreId", (IEnumerable<SelectListItem>)ViewBag.Cuatrimestres, "Seleccione...", new { @class = "form-control" })
            </div>
        </div>

        <!-- Selector de cursos por cuatrimestre -->
        <div class="form-group">
            @Html.Label("Cursos asignados", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("CursosSeleccionados", (IEnumerable<SelectListItem>)ViewBag.CursosSeleccionados, new { @class = "form-control", multiple = "multiple", id = "cursosEstudiante" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registrar" class="btn btn-primary" />
                @Html.ActionLink("Regresar a la Lista", "Index", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

<script>
    // Persistencia de datos de formulario usando localStorage
    window.onload = function () {
        var campos = [
            "nombreEstudiante",
            "apellidosEstudiante",
            "identificacionEstudiante",
            "fechaNacimientoEstudiante",
            "provinciaEstudiante",
            "cantonEstudiante",
            "distritoEstudiante",
            "correoEstudiante"
        ];
        campos.forEach(function (campo) {
            if (localStorage.getItem(campo)) {
                document.getElementById(campo).value = localStorage.getItem(campo);
            }
        });

        setTimeout(function () {
            var errores = document.getElementsByClassName('text-danger');
            for (var i = 0; i < errores.length; i++) {
                errores[i].style.display = 'none';
            }
        }, 4000);

        // Rellenar selección de cursos
        if (localStorage.getItem("cursosEstudiante")) {
            var cursosSeleccionados = JSON.parse(localStorage.getItem("cursosEstudiante"));
            var selectCursos = document.getElementById("cursosEstudiante");
            for (var i = 0; i < selectCursos.options.length; i++) {
                if (cursosSeleccionados.indexOf(selectCursos.options[i].value) !== -1) {
                    selectCursos.options[i].selected = true;
                }
            }
        }
    };

    // Guarda cada cambio en localStorage
    [
        "nombreEstudiante",
        "apellidosEstudiante",
        "identificacionEstudiante",
        "fechaNacimientoEstudiante",
        "provinciaEstudiante",
        "cantonEstudiante",
        "distritoEstudiante",
        "correoEstudiante"
    ].forEach(function (campo) {
        document.getElementById(campo).addEventListener("input", function () {
            localStorage.setItem(campo, this.value);
        });
    });

    // Guarda selección de cursos en localStorage
    document.getElementById("cursosEstudiante").addEventListener("change", function () {
        var seleccionados = Array.from(this.selectedOptions).map(function (opt) { return opt.value; });
        localStorage.setItem("cursosEstudiante", JSON.stringify(seleccionados));
    });

    // Limpia localStorage al enviar el formulario
    document.querySelector("form").addEventListener("submit", function () {
        [
            "nombreEstudiante",
            "apellidosEstudiante",
            "identificacionEstudiante",
            "fechaNacimientoEstudiante",
            "provinciaEstudiante",
            "cantonEstudiante",
            "distritoEstudiante",
            "correoEstudiante",
            "cursosEstudiante"
        ].forEach(function (campo) {
            localStorage.removeItem(campo);
        });
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}